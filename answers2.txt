Algo 1: Recursive Permutations
  
  const perm = (array) => {
    const foundPerms = [];

    //* Recursive Helper Function
    const permHelper = (subArr, currentPerm) => {
        //? Base Case
        //* Check the length of the sub array
        //* If its an empty array, then we add the 
        //* current permutation we have been building to our array of found permutation
        if (subArr.length === 0){
            foundPerms.push(currentPerm)
        }

        //? For loop that loops for the length of our subarray
        for(let i = 0; i < subArr.length; i++){
            const newSubArr = subArr.slice(0, i).concat(subArr.slice(i + 1));
            const newCurrentPerm = currentPerm.concat(subArr[i]);
            //? Recursive call with out new arrays
            permHelper(newSubArr, newCurrentPerm)
        }
    }

    //* Initial call to our recursive helper function
    permHelper(array, [])

    //* Return our array of found permutations
    return foundPerms;
}

console.log(perm([1, 2, 3])); //[[1, 2, 3], [1, 3, 2], [2, 3, 1], [2, 1, 3], [3, 1, 2], [3, 2, 1]]

Algo 2: Recursive Reverse:

  const reverse = (str) => {
    //* Initialize our variable with an empty string
    let newStr = '';

    //* Base Case
    if(str.length === 0) return newStr;

    //* add the last char to the new string
    //* then call function again with all char except the last string
    newStr += str[str.length - 1] + reverse(str.slice(0, str.length - 1));

    //* Return our variable that houses the reversed string
    return newStr;
}

Algo 3: Factorial: 

const factorial1 = (n) => {
    //* Base case
    if(n === 1){
        return 1
    }
    //* Multiply the current number by the return of the next function
    //* Just with an input of n - 1 now
    return n * factorial1(--n);
}

console.log(factorial1(5)) //120




//refactored one liner
const factorial2 = (n) => n === 1 ? 1 : n * factorial2(--n);

console.log(factorial2(5)) //120

Algo 4: Staircase algo: 

const staircase = (n, i=1, string='') => {
    if(i === n+1){
        console.log(string)
    }else{
        string += ' '.repeat(n-i) + '#'.repeat(i) + '\n';
        i++
        staircase(n, i, string)
    }
}

staircase(4);

Algo 5: 

const miniMaxSum = (arr) => {
    const returnArr = [];
    // if we sort it from smallest to greatest, the first 4 numbers will be the smallest and the last 4 will be the largest
    arr.sort((a, b) => a - b);
    returnArr.push(arr.slice(0, 4).reduce((a, c) => a + c));
    returnArr.push(arr.slice(arr.length - 4).reduce((a, c) => a + c));
    console.log(returnArr.join(" "))
}

console.log(miniMaxSum([1, 3, 5, 7, 9])) // 16, 24 --> 16 being the smallest and 24 being the largest